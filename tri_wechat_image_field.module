<?php
module_load_include('php', 'tri_wechat_api', 'wechat_account_test');
module_load_include('php', 'tri_wechat_api', 'weichat.class');


/*
 * Implements hook_field_info()
 */
function tri_wechat_image_field_field_info() {
	return array(
		'tri_wechat_image_field_photo' => array(
			'label' => t('Wechat photo'),
			'description' => t('This field stores server_id of the photo taken from wechat client.'),
			'default_widget' => 'tri_wechat_image_field_button',
			'default_formatter' => 'tri_wechat_image_field_raw',
			'property_type' => 'text',
			'property_callbacks' => array('entity_metadata_field_text_property_callback'),
		),
	);
}


/*
 * Implements hook_field_widget_info()
 */
function tri_wechat_image_field_field_widget_info() {
	return array(
		'tri_wechat_image_field_button' => array(
			'label' => t('Take photo button'),
			'field types' => array('tri_wechat_image_field_photo'),
		),
	);
}

/*
 * Implements hook_field_widget_form
 */
function tri_wechat_image_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element){
	#dsm($field);
	//wechat init
	$wc = new WeiChat(WECHAT_APPID, WECHAT_APPSECRET, WECHAT_TOKEN);
	$jscfg = $wc->getJswxConfig();
	
//	drupal_add_js(array('tri_wechat_image_field' => array(
//		'appId' => $jscfg['appId'],
//		'timestamp'=> $jscfg['timestamp'], 
//		'nonceStr'=> $jscfg['nonceStr'], 
//		'signature'=> $jscfg['signature'], 
//	)), array('type' => 'setting'));
	
	if($field['cardinality'] == 1) {
		$element['#type'] = 'fieldset';
	}
	
	//prepare js varialbles
	$setting = array(
		'appId' => $jscfg['appId'],
		'timestamp'=> $jscfg['timestamp'], 
		'nonceStr'=> $jscfg['nonceStr'], 
		'signature'=> $jscfg['signature'], 
	);
	
	$element['server_id'] = array(
		'#type' => 'hidden',		//should be: hidden
		'#field_prefix' => t('ServerId: '),
		'#size' => 65,
		'#default_value' => isset($items[$delta]['server_id'])? $items[$delta]['server_id']: '',
		'#attributes' => array(
			'class' => array('textfield-of-serverid'),
			'readonly' => array('readonly'),
		),
		'#suffix' => '<a href="javascript:;" class="button" onclick="takePhoto(this);">Take Photo</a><img class="thumbnail-of-serverid" height="25px" width="25px" />',
		'#attached' => array(
			'js' => array(
				array(
					'data' => array('tri_wechat_image_field' => $setting),
					'type' => 'setting',
				),
				drupal_get_path('module', 'tri_wechat_image_field') . '/js/jweixin-1.2.0.js',
				drupal_get_path('module', 'tri_wechat_image_field') . '/js/wechat_image_fun.js',
			)
		),
	);
	
	return $element;
}

/*
 * Implements hook_field_formatter_info()
 */
function tri_wechat_image_field_field_formatter_info() {
	return array(
		'tri_wechat_image_field_raw' => array(
			'label' => t('Raw server_id value'),
			'field types' => array('tri_wechat_image_field_photo'),
		),
	);
}

/*
 * Implements hook_field_formatter_view()
 */
function tri_wechat_image_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	$element = array();
	
	switch($display['type']) {
		case 'tri_wechat_image_field_raw':
			foreach($items as $delta=>$value) {
				$element[$delta] = array(
					'#type' => 'markup',
					'#markup' => t('@id',array('@id'=> $value['server_id'])),
				);
			}
		
			break;
	}
	
	return $element;
}

/*
 * Implements hook_field_is_empty()
 */
function tri_wechat_image_field_field_is_empty($item, $field) {
	#dsm(empty($item['server_id']));
	return empty($item['server_id']);
}

/*
 * Implements hook_field_validate()
 */
function tri_wechat_image_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
	foreach($items as $delta => $item) {
		if(!empty($item['server_id'])) {
			if( drupal_strlen($item['server_id']) < 32) {
				$errors[$field['field_name']][$langcode][$delta][] = array(
					'error' => 'server_id_length',
					'message' => t('%name: the id length should be more than 32 charaters.',array('%name' => $instance['label'])),
				);
			}
			
		}
	}
}


/*
 * Implements hook_node_presave()
 */
function tri_wechat_image_field_node_presave($node) {
	tri_wechat_image_field_download_image_save($node);
}

/**
 * Download the image from wechat server and save to actual image field
 * @param object $node
 */
function tri_wechat_image_field_download_image_save($node) {
	$nwp = entity_metadata_wrapper('node', $node);
	dsm($node);#dsm($nwp->getPropertyInfo());
	#dsm(_wrapper_debug($nwp));
	
	// this function is only for nodes of XXXX
	if( $nwp->type->value() != 'data_entry') {
		return;
	}
	
	// check the media_id
	$media_id = $nwp->field_wechat_photo->value();
	if( empty($media_id)) {
		return;
	}
	
	// download the file and new file object
	$directory = 'public://tri-wechat-image';
	if( !file_prepare_directory($directory)) {
		drupal_mkdir($directory);
	}
	$filename = '/'.date('YmdHis').'.'.substr($media_id,0,8).'.jpg';
	$wc = new WeiChat(WECHAT_APPID, WECHAT_APPSECRET, WECHAT_TOKEN);
	$acc_token = $wc->getAccesstoken();
	$remote_path = "https://api.weixin.qq.com/cgi-bin/media/get?access_token=$acc_token&media_id=$media_id";
	$local_file = system_retrieve_file($remote_path, $directory.$filename, true, FILE_EXISTS_RENAME);
	
	// set the file
	if(!$nwp->is_new && isset($nwp->field_photo->fid)) {
		$ok = file_delete($nwp->field_photo->file);
	}
	$nwp->field_photo->file = $local_file;
	
	// The following codes cause error: 1062 Duplicate entry
	//	$nwp->save();
}

/**
 * help function for EMW
 * @param wrapper $w
 * @return array
 */
function _wrapper_debug($w) {
	$values = array();
	foreach ($w->getPropertyInfo() as $key => $val) {
		$values[$key] = $w->$key->value();
	}
	return $values;
}
